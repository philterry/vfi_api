Welcome to Vmetro's FusionIPC API Library Package!

You will have obtained this file and the directory it resides in by
one of two "official" methods. 

1. You obtained and unpacked a tarball vfi_api-<version>.tar.gz, or, 
2. You checked out the latest package from a CVS or GIT server.

Unofficially you may have unpacked a checkout directory from an
unofficial tarball, etc.

If there are a lot of files, including a "configure" script in the top
level directory you have a type 1 above. If there is no configure
script you probably have a type 2 above, but you may have a borked
type 1. If you are unsure, obtain a legitimate source from vmetro.com.

Tarball
=======

If you have a type 1 package follow the installation instructions
given in ./INSTALL. These are generic instructions. ./configure --help
is always a good first step to know what features and controls are
available for this package. See also Useful Tips below.

Checkout
========

If you have a type 2 package you need to follow a few simple steps to
bootstrap the package to a type 1. These steps require that you have
the autotools installed on your development system: autoconf,
automake, libtool. You should use an up to date version of these tools
if possible. In the top level directory run 

   autoreconf -i

If this is not successful follow the helpful suggestions printed out
to fix the problem. If you are unsuccessful contact support@vmetro.com

If successful run

   ./configure --help

to decide what if any parameters you wish to use then run

   ./configure <parameters and options>

usually you use --prefix=$HOME/somedir etc., to avoid needing
superuser access to /usr/local, etc. See Useful Tips below.

If this fails follow the helpful suggestions printed out to fix the
problem. If you are unsuccessful contact support@vmetro.com

If successful run 

   make distcheck

If this succeeds you should have a ./vfi_api-<version>.tar.gz tarball
version of your directory and everything is now known to work.

If you wish to give someone a tarball of this package from your
checkout this is the correct procedure to follow as it will give them
a clean tarball not contaminated by your local changes and configured
files and yet doesn't require them to have all the autoconf etc tool
sets.

Useful Tips
===========

Run

	make install 

to install this package and

   make uninstall 

to remove it. You may need to be superuser for these two commands
depending on your access rights to the prefix and/or DESTDIR
directories.

If you are running on a development system which is also the host
system to run the code you will typically use --prefix=... to decide
where to install the code, for example --prefix=/home/me/sandbox

If you are running on a development system where the host system is
another system, typically an embedded system you will typically use
--prefix=/usr and then use the DESTDIR envirionment variable to
actually have the files installed in a staging directory. This will
either be an NFS exported directory which the target host mounts for
its root filesystem or a directory which will be used to create an
initrd or ram filesystem file for an embedded target.

       ./configure --prefix=/usr ...
       DESTDIR=xxx make ...
       
or
	./configure --prefix=/usr ...
	setenv DESTDIR xxx
	make ...

depending on shell type or

	  ./configure --prefix=/usr
	  make DESTDIR=xxx ...

to use make variable for DESTDIR.

The prefix setting will affect how dynamic libraries and applications
are linked for run-time, /usr/..., while the DESTDIR prefix affects where the
files are actually stored during the install, xxx/usr/...

DESTDIR should be a non-relative path, /xxx/xyz/yyy, etc.
